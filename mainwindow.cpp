#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <iostream>
#include <string>
#include <QFileDialog>


using namespace std;
string cad,palabra,tipo;
int x,nc=0,xtoken=0,xstak=2;
int flagLocal=0,flagDef=0,flagMain=0;  //Red flags
string tipos[100][2];

string vecTipos[100];       //Vectores para error entre tipos
string vecOper[100];
string vecOperacion[100];

string vecOp[100];          //Vectores para crear cuadruplos
string vecOper1[100];
string vecOperacion1[100];

int puntOperacion=0;
int var=0,tip=1,filti=0,confil;


int M[51][31]={{1,2,3,500,25,2,1,9,11,12,13,14,15,16,17,18,19,20,21,22,45,46,26,47,48,49,50,0,0,0,500},
               {1,2,2,2,100,100,1,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100},
               {2,2,2,2,101,2,2,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101},
               {102,102,3,102,4,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102},
               {501,501,5,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501,501},
               {103,103,5,103,103,6,6,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103},
               {502,502,8,502,502,502,502,502,502,7,7,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502},
               {503,503,8,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503,503},
               {104,104,8,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104},
               {10,10,10,10,10,10,10,504,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
               {505,505,505,505,505,505,505,39,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505,505},
               {11,11,11,11,11,11,11,11,40,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},
               {109,109,109,109,109,109,109,109,109,28,109,109,109,109,109,109,109,29,109,109,109,109,109,109,109,109,109,109,109,109,109},
               {110,110,110,110,110,110,110,110,110,110,30,110,110,110,110,110,110,31,110,110,110,110,110,110,110,110,110,110,110,110,110},
               {113,113,113,113,113,113,113,113,113,113,113,32,113,113,113,113,113,33,113,113,113,113,113,113,113,113,113,113,113,113,113},
               {116,116,116,116,116,116,116,116,116,116,116,23,116,116,116,116,116,34,116,116,116,116,116,116,116,116,116,116,116,116,116},
               {119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,35,119,119,119,119,119,119,119,119,119,119,119,119,119,119},
               {506,506,506,506,506,506,506,506,506,506,506,506,506,506,36,506,506,506,506,506,506,506,506,506,506,506,506,506,506,506,506},
               {507,507,507,507,507,507,507,507,507,507,507,507,507,507,507,37,507,507,507,507,507,507,507,507,507,507,507,507,507,507,507},
               {122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,38,122,122,122,122,122,122,122,122,122,122,122,122,122},
               {124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,41,124,124,124,124,124,124,124,124,124,124,124,124,124},
               {126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,42,126,126,126,126,126,126,126,126,126,126,126,126,126},
               {128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,43,128,128,128,128,128,128,128,128,128,128,128,128,128},
               {23,23,23,23,23,23,23,23,23,23,23,24,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23},
               {23,23,23,23,23,23,23,23,23,23,23,24,27,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23},
               {508,508,508,508,44,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508,508},
               {26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,138,26,26},
               {137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137},
               {107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107},
               {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
               {111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111},
               {112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112},
               {114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114},
               {115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115},
               {117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117},
               {118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118},
               {120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120},
               {121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121},
               {123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123},
               {105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105},
               {106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106},
               {125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125},
               {127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127},
               {129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129},
               {132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132},
               {130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130},
               {131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131},
               {133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133},
               {134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134},
               {135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135},
               {136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136}};

              //  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37 38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55   56  57  58  59  60  61  62  63  64  65  66
int MP[54][67]={{ 1 , 1 ,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509,509},
                { 2 , 3 ,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510},
                {511, 4 ,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511},
                {512,512, 5 , 6 , 6 ,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512,512},
                {513,513,513,513,513, 7 ,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513},
                {514,514,514,514,514,514, 8 , 9 ,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514,514},
                {515,515,515,515,515,515,515,515, 10, 11, 12, 13, 14, 15,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515},
                {516,516,516,516,516, 19,516,516,516,516,516,516,516,516, 16, 17, 18,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516},
                {517,517,517,517,517, 20,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517},
                {518,518,518,518,518,518, 22, 22,518,518,518,518,518,518,518,518,518, 21,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518,518},
                {519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519, 23,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519,519},
                {520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520, 24,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520,520},
                {521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521, 26,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521,521},
                {522,522,522, 27, 27,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522,522},
                {523,523,523,523, 28,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523,523},
                {524,524,524, 29, 30,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524,524},
                {525,525,525,525,525, 32,525,525,525,525,525,525,525,525,525,525,525,525,525, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,525,525, 32, 32, 32, 32, 32, 32, 32, 32,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525},
                {526,526,526,526,526, 33,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526, 34,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526,526},
                {527,527,527,527,527, 35,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527, 36,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527,527},
                {528,528,528,528,528, 37,528,528,528,528,528,528,528,528,528,528,528,528,528,528, 38, 39, 40, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 44, 45,528,528, 46, 46, 46, 46, 46, 46, 46, 46,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528,528},
                {529,529,529,529,529, 47,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529,529},
                {530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530, 48,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530},
                {531,531,531,531,531, 49,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531,531},
                {532,532,532,532,532,532, 50,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532, 51,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532,532},
                {533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533, 52,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533},
                {534,534,534,534,534, 53,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534, 53, 53, 53, 53, 53, 53, 53,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534,534},
                {535,535,535,535,535,535, 54,535,535,535,535,535,535,535,535,535,535,535, 55,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535, 55,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535},
                {536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536, 56,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536},
                {537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537, 57, 58, 59, 60, 61, 62,537,537,537,537,537,537,537,537,537,537,537,537,537,537,537},
                {538,538,538,538,538, 63,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538},
                {539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539, 64,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539, 65, 65, 65, 65, 65, 65,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539},
                {540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540, 66,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540},
                {541,541,541,541,541, 69,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541, 67, 68, 69, 69, 69, 69, 69, 69, 69,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541},
                {542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542, 70, 71,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542},
                {543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543, 72,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543,543},
                {544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544, 73,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544},
                {545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545, 74,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545},
                {546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546, 75,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546,546},
                {547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547, 77, 78, 76,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,547},
                {548,548,548,548,548, 79,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548, 79, 79, 79, 79, 79, 79, 79,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548,548},
                {549,549,549,549,549,549 ,81,549,549,549,549,549,549,549,549,549,549,549, 81,549,549,549,549, 81, 81, 81,549,549,549,549,549,549,549,549,549,549,549, 81,549,549,549,549,549,549,549,549,549,549,549,549,549,549, 80,549,549,549,549,549,549,549,549,549,549,549,549, 81, 81},
                {550,550,550,550,550, 82,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550, 82, 82, 82, 82, 82, 82, 82,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550},
                {551,551,551,551,551,551, 84,551,551,551,551,551,551,551,551,551,551,551, 84,551,551,551,551, 84, 84, 84,551,551,551,551,551,551,551,551,551,551,551, 84,551,551,551,551,551,551,551,551,551,551,551,551,551,551, 84, 83,551,551,551,551,551,551,551,551,551,551,551, 84, 84},
                {552,552,552,552,552, 86,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552, 85, 86, 86, 86, 86, 86, 86,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552},
                {553,553,553,553,553, 87,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553, 87, 87, 87, 87, 87, 87,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553,553},
                {554,554,554,554,554,554, 89,554,554,554,554,554,554,554,554,554,554,554, 89,554,554,554,554, 89, 89, 89,554,554,554,554,554,554,554,554,554,554,554, 89,554,554,554,554,554,554,554,554,554,554,554,554,554,554, 89, 89, 88, 88, 88, 88, 88, 88, 554,554,554,554,554, 89,89},
                {555,555,555,555,555, 90, 55,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555, 90, 90, 90, 90, 90, 90,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555},
                {556,556,556,556,556,556, 93,556,556,556,556,556,556,556,556,556,556,556, 93,556,556,556,556, 93 ,93, 93,556,556,556,556,556,556,556,556,556,556,556, 93,556,556,556,556,556,556,556,556,556,556,556,556,556,556, 93, 93, 93, 93, 93, 93, 93, 93, 91, 92, 556,556,556, 93,93},
                {557,557,557,557,557, 94,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557, 94, 94, 94, 94, 94, 94,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557},
                {558,558,558,558,558,558, 98,558,558,558,558,558,558,558,558,558,558,558, 98,558,558,558,558, 98, 98, 98,558,558,558,558,558,558,558,558,558,558,558, 98,558,558,558,558,558,558,558,558,558,558,558,558,558,558, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 95, 96, 97, 98, 98},
                {559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559, 99,100,101,102,103,104,559,559,559,559,559,559,559},
                {560,560,560,560,560,560,106,560,560,560,560,560,560,560,560,560,560,560,106,560,560,560,560,106,106,106,560,560,560,560,560,560,105,560,560,560,560,106,560,560,560,560,560,560,560,560,560,560,560,560,560,560,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106},
                {561,561,561,561,561,107,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,108,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561},
                {562,562,562,562,562,109,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,110,111,112,113,114,115,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562,562}};

string token[400];
string stack[400];

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);

}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_btnAnalizar_clicked()
{
   QString cadena = ui->txtAnaliza->toPlainText();
   cad=cadena.toStdString();
   cout<<cad<<"\n";

   void Analiza(string cad,QTableWidget *tablaT, QTextEdit *Error, QTextEdit *Sintaxis,QTableWidget *tablaTipos);

   Analiza(cad,ui->tablaT,ui->txtErrores,ui->txtSintaxis,ui->tablaTipos);

}

void Analiza(string cad, QTableWidget *tabla, QTextEdit *Erro, QTextEdit *Sintaxis,QTableWidget *tablaTipos){
    int edo, col;
    char car;
    string sbcad;
    int cont_cadena = 0,len;
    int ini,longi=1; //Inicio y longitu de la sub cadena
    len = cad.length();
    int relaciona(char car);
    void Token(int edo, string sb, QTableWidget *tab,QTextEdit *Erro);
    void Error (int edo,string sb, QTextEdit *Erro);
    void Sintactico(string vector[],QTextEdit *Sintaxis,QTextEdit *Erro);
    edo = 0;
    x=0;
        while ( cont_cadena <= len){
                if(edo == 0){
                    ini = x;
                    longi=1;
                }
                car = cad[x]; //Leer caracter
                //cout<<"Caracter: "<<car<<"\n";
                col = relaciona (car);
                //cout<<"Columna: "<<col<<"\n";
                edo = M[edo][col];
                //cout<<"Estado: "<<edo<<"\n";
                //cout<<"Longi: "<<longi<<"\n";
        x++;
            if (edo >= 100 && edo <= 138){
                x--;
                cont_cadena--;
                longi--;

                sbcad = cad.substr(ini,longi);
                Token(edo , sbcad, tabla,Erro);
                edo=0;
                longi=1;

                //

            }
            else if(edo >= 500 && edo <= 510){
                 sbcad = cad.substr(ini,longi);
                 Error(edo,sbcad, Erro);
                break;
            }

            cont_cadena++;

            //if(car!=' '){
               longi++;
           // }

            if(car == '\0' ){
                break;
            }
        }
        token[xtoken]="$";
        stack[0]="$";
        stack[1]="PROGRAM";

        for(int i=0;i<200;i++){
            if(token[i].empty()){
                break;
            }
            cout<<token[i]<<"\n";
        }

        Sintactico(token,Sintaxis,Erro);

        string var="";
        string tip="";
        cout<<"\n";
        for(int i=0;i<filti;i++){
            var=tipos[i][0];
            tip=tipos[i][1];
            cout<<"var: "<<var<< " tip: "<<tip<<endl;
            tablaTipos->insertRow(tablaTipos->rowCount());
            tablaTipos->setItem(tablaTipos->rowCount()-1,0, new QTableWidgetItem(QString::fromStdString(var)));
            tablaTipos->setItem(tablaTipos->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(tip)));
        }
        //cout<<"Filti en posicion: "<<filti<<endl;
}

int relaciona(char c){

    if(c >= 97 && c <= 122 && c != 'e'){//letras minusculas && c != 'e'
        return 0;
    }
    if(c >= 65 && c <= 90 && c != 'E'){//letras mayusculas && c != 'E'
        return 1;
    }

    if(c >= 48 && c<= 57) { //digitos
        return 2;
    }

    switch (c) {
        case '_':
            return 3;
        break;
        case '.':
            return 4;
        break;
        case 'E':
            return 5;
        break;
        case 'e':
            return 6;
        break;
        case 39://comilla sencilla
            return 7;
        break;
        case 34://comilla doble
            return 8;
        break;
        case '+':
            return 9;
        break;
        case '-':
            return 10;
        break;
        case '*':
            return 11;
        break;
        case '/':
            return 12;
        break;
        case '%':
            return 13;
        break;
        case '&':
            return 14;
        break;
        case '|':
            return 15;
        break;
        case '!':
            return 16;
        break;
        case '=':
            return 17;
        break;
        case '<':
            return 18;
        break;
        case '>':
            return 19;
        break;
        case ';':
            return 20;
        case ',':
            return 21;
        break;
        case '#':
            return 22;
        break;
        case '(':
            return 23;
        break;
        case ')':
            return 24;
        break;
        case '[':
            return 25;
        break;
        case ']':
            return 26;
        break;
        case '\t':
            return 27;
        break;
        case '\n':
            return 28;
        break;
        case ' ':
            return 29;
        break;
    }
    return 30;

}//fin de relaciona


void Token (int e , string sb, QTableWidget *tab, QTextEdit *Erro){
    int flag=0; //Bandera para determinar si es una palabra reservada
    int fil=0;
    int flagNoDef=0;
    string palres[]={"class","endclass","int","float","char","string","bool","if","else","elseif","endif",
                     "do","eval","enddo","while","endwhile","read","write","def","as","for","endfor",
                     "private","public","protected","library","func","endfunc","main","endmain","true",
                     "false","void","to","local","return","endlocal"};
    string Tipos[]{"int","float","char","string","bool","void"};

    int fl=0;//Bandera para buscar variable repetida
    void Error (int edo,string sb, QTextEdit *Erro);

    switch (e){
            case 100:

                cout<<"100" <<sb<<"Palabra reservada\n";
                for(int x=0;x<38;x++){

                    if(sb.compare(palres[x]) == 0){ //sb.compare(palres[x]) == 0
                        tab->insertRow(tab->rowCount());
                        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("100"));
                        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
                        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Palabra reservada"));
                        token[xtoken]=sb;
                        xtoken++;
                        flag=1; //La palabra encontrada fue una palabra reservada
                        if(sb.compare("local") == 0 ){
                            flagLocal=1; //Cambia el valor de la bandera cuando se encuentra la palabra reservada "local"
                            confil=filti;
                        }else if(sb.compare("def")==0){
                            flagLocal=1;
                            flagDef=1;
                            confil=filti;
                        }else if(sb.compare("endlocal") == 0){
                            flagLocal=0; //Se cierra la definicion de variables
                        }else if(sb.compare("main") == 0){
                            flagMain=1;
                        }else if(sb.compare("endmain") == 0){
                            flagMain=0;
                        }

                    }
                }

                for(int x=0;x<6;x++){ //Ciclo para determinar el tipo de la variable y utilizar en tabla de tipos
                    if(sb.compare(Tipos[x]) == 0 && flagLocal == 1){
                        tipo=sb;
                        for(int x=confil;x<filti;x++){
                            tipos[x][tip]=tipo;
                        }
                        if(!tipos[filti][0].empty()){
                            tipos[filti][tip]=tipo;
                            filti++;
                            fil=filti;
                            cout<<fil<<"\n";
                        }

                    }
                }

                if(flag == 0){ //Identificador encontrado
                    cout<<"101 "<<sb<<" Identificador\n";
                    tab->insertRow(tab->rowCount());
                    tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("101"));
                    tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
                    tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Identificador"));
                   token[xtoken]="id";
                   xtoken++;
                   cout<<sb<<endl;

                   if(flagLocal == 1){
                       palabra=sb;
                       for(int x=0;x<=filti;x++){
                           if(palabra == tipos[x][0]){
                               fl=1;
                           }
                       }
                       if(fl == 0){ //No hay variable repetida agregar a matriz
                           tipos[filti][var]=palabra;
                       }else{ //La variable esta repetida desplega error
                           cout<<"563: Error semantico: Variable duplicada"<<palabra<<endl;
                           Error(563,sb, Erro);
                       }
                   }

                   //----------------------BANDERA MAIN-----------------------
                   if(flagMain == 1){
                       for(int x=0;x<filti;x++){
                           if(sb.compare(tipos[x][0])==0){
                               flagNoDef=1;
                               x=filti;
                           }
                       }

                       if(flagNoDef==0){  //Se aade variable no definica con tipo de entero
                           tipos[filti][0]=sb;
                           tipos[filti][1]="int";
                           cout<<"564: Error Semantico: Variable no definida  :"<<sb<<endl;
                           Error(564,sb, Erro);
                           filti++;
                       }

                       for(int x=0;x<filti;x++){  //Ingresamos el tipo de la variable a la operacion
                           if(sb.compare(tipos[x][0])==0){
                               vecOperacion[puntOperacion]=tipos[x][1];
                               x=filti;
                           }
                       }
                       vecOperacion1[puntOperacion]=sb;
                       puntOperacion++;

                   }

                }

            break;
            case 101:
                 cout<<"101 "<<sb<<" Identificador\n";
                 tab->insertRow(tab->rowCount());
                 tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("101"));
                 tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
                 tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Identificador"));
                 token[xtoken]="id";
                 xtoken++;
                 if(flagLocal == 1){
                     palabra=sb;
                     for(int x=0;x<=filti;x++){
                         if(palabra == tipos[x][0]){
                             fl=1;
                         }
                     }
                     if(fl == 0){
                         tipos[filti][var]=palabra;
                     }else{
                         cout<<"563: Error semantico: Variable duplicada: "<<palabra<<endl;
                         Error(563,sb, Erro);
                     }
                 }

                 //----------------------BANDERA MAIN-----------------------
                 if(flagMain == 1){
                     for(int x=0;x<filti;x++){
                         if(sb.compare(tipos[x][0])==0){
                             flagNoDef=1;
                             x=filti;
                         }
                     }

                     if(flagNoDef==0){  //Se anade variable no definica con tipo de entero
                         tipos[filti][0]=sb;
                         tipos[filti][1]="int";
                         cout<<"564: Error Semantico: Variable no definida  :"<<sb<<endl;
                         Error(564,sb, Erro);
                         filti++;
                     }


                     for(int x=0;x<filti;x++){  //Ingresamos el tipo de la variable a la operacion
                         if(sb.compare(tipos[x][0])==0){
                             vecOperacion[puntOperacion]=tipos[x][1];
                             x=filti;
                         }
                     }
                     vecOperacion1[puntOperacion]=sb;
                     puntOperacion++;


                 }


            break;
            case 102:
                 tab->insertRow(tab->rowCount());
                 tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("102"));
                 tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
                 tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Entero"));
                 token[xtoken]="cteentera";
                 xtoken++;
            break;
            case 103:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("103"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Reales"));
                 token[xtoken]="ctereal";
                 xtoken++;
            break;
            case 104:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("104"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Notación Cientifica"));
                 token[xtoken]="ctenotacion";
                 xtoken++;
            break;
            case 105:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("105"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Constante Caracter"));
                 token[xtoken]="ctecaracter";
                 xtoken++;
            break;
            case 106:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("106"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Constante String"));
                 token[xtoken]="ctestring";
                 xtoken++;
            break;
            case 107:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("107"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem("++"));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Operador aritmético"));
                 token[xtoken]="++";
                 xtoken++;
            break;
            case 108:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("108"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Asiganación"));
                 token[xtoken]="+=";
                 xtoken++;
            break;
            case 109:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("109"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Suma"));
                 token[xtoken]="+";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="+";
                     vecOperacion1[puntOperacion]="+";
                     puntOperacion++;
                 }
            break;
            case 110:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("110"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Resta"));
                 token[xtoken]="-";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="-";
                     vecOperacion1[puntOperacion]="-";
                     puntOperacion++;
                 }
            break;
            case 111:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("111"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem("--"));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Aritmético"));
                 token[xtoken]="--";
                 xtoken++;
            break;
            case 112:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("112"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Asignación"));
                token[xtoken]="-=";
                xtoken++;
            break;
            case 113:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("113"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Multiplicación"));
                 token[xtoken]="*";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="*";
                     vecOperacion1[puntOperacion]="*";
                     puntOperacion++;
                 }
            break;
            case 114:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("114"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem("**"));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Aritmético"));
                 token[xtoken]="**";
                 xtoken++;
            break;
            case 115:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("115"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Asignación"));
                 token[xtoken]="*=";
                 xtoken++;
            break;
            case 116:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("116"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("División"));
                 token[xtoken]="/";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="/";
                     vecOperacion1[puntOperacion]="/";
                     puntOperacion++;
                 }
            break;
            case 117:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("117"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Asignación"));
                 token[xtoken]="/=";
                 xtoken++;
            break;
            case 118:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("118"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Asignación"));
                 token[xtoken]="%=";
                 xtoken++;
            break;
            case 119:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("119"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Modulo"));
                 token[xtoken]="%";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="%";
                     vecOperacion1[puntOperacion]="%";
                     puntOperacion++;
                 }
            break;
            case 120:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("120"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("And"));
                 token[xtoken]="&&";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="&&";
                     vecOperacion1[puntOperacion]="&&";
                     puntOperacion++;
                 }
            break;
            case 121:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("121"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Or"));
                 token[xtoken]="||";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="||";
                     vecOperacion1[puntOperacion]="||";
                     puntOperacion++;
                 }
            break;
            case 122:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("122"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Not"));
                 token[xtoken]="!";
                 xtoken++;
            break;
            case 123:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("123"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Diferente"));
                token[xtoken]="!=";
                xtoken++;
            break;
            case 124:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("124"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Asigna"));
                 token[xtoken]="=";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="=";
                     vecOperacion1[puntOperacion]="=";
                     puntOperacion++;
                 }
            break;
            case 125:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("125"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Igual"));
                 token[xtoken]="==";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="==";
                     vecOperacion1[puntOperacion]="==";
                     puntOperacion++;
                 }
            break;
            case 126:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("126"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Menor que"));
                 token[xtoken]="<";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="<";
                     vecOperacion1[puntOperacion]="<";
                     puntOperacion++;
                 }
            break;
            case 127:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("127"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Menor igual que"));
                 token[xtoken]="<=";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="<=";
                     vecOperacion1[puntOperacion]="<=";
                     puntOperacion++;
                 }
            break;
            case 128:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("128"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Mayor que"));
                 token[xtoken]=">";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]=">";
                     vecOperacion1[puntOperacion]=">";
                     puntOperacion++;
                 }
            break;
            case 129:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("129"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Mayor igual que"));
                 token[xtoken]=">=";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]=">=";
                     vecOperacion1[puntOperacion]=">=";
                     puntOperacion++;
                 }
            break;
            case 130:
        cout<<"130 "<<sb<<" Punto y coma\n";
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("130"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Punto y coma"));
                 token[xtoken]=";";
                 xtoken++;
                 if(flagDef==1){
                     flagLocal=0;
                     flagDef=0;
                 }
                 if(flagLocal==1){
                     confil=filti;
                 }

                 vecOperacion[puntOperacion]=";";
                 vecOperacion1[puntOperacion]=";";
                 puntOperacion++;

                 //Invocacion del metodo
                 //Limpiar los vectores

            break;
            case 131:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("131"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Coma"));
                 token[xtoken]=",";
                 xtoken++;
                 if(flagLocal==1){
                     filti++;
                 }
            break;
            case 132:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("132"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Doble punto"));
                 token[xtoken]="..";
                 xtoken++;
            break;
            case 133:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("133"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Parentesis que abre"));
                 token[xtoken]="(";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]="(";
                     vecOperacion1[puntOperacion]="(";
                     puntOperacion++;
                 }
            break;
            case 134:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("134"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Parentesis que cierra"));
                 token[xtoken]=")";
                 xtoken++;
                 if(flagMain==1){
                     vecOperacion[puntOperacion]=")";
                     vecOperacion1[puntOperacion]=")";
                     puntOperacion++;
                 }
            break;
            case 135:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("135"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem("["));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Corchete que abre"));
                 token[xtoken]="[";
                 xtoken++;
            break;
            case 136:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("136"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Corchete que cierra"));
                token[xtoken]="]";
                xtoken++;
            break;
            case 137:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("137"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Comentario de bloque"));
            break;
            case 138:
        tab->insertRow(tab->rowCount());
        tab->setItem(tab->rowCount()-1,0, new QTableWidgetItem("138"));
        tab->setItem(tab->rowCount()-1,1, new QTableWidgetItem(QString::fromStdString(sb)));
        tab->setItem(tab->rowCount()-1,2, new QTableWidgetItem("Comentario de linea"));
            break;
    }


} //fin de token

void errorTipos(){
    int puntTipos=1, puntOper=1;;
    vecTipos[0]=vecOperacion[0];
    vecOper[0]=vecOperacion[1];

    for(int x=2;x<puntOperacion;x++){
        if(vecOperacion[x] == "int" || vecOperacion[x]=="float" || vecOperacion[x]=="char" || vecOperacion[x] == "string" || vecOperacion[x] == "boolean"){
            vecTipos[puntTipos]=vecOperacion[x];
            puntTipos++;
            if(vecOper[puntOper-1] == "*" ||){

            }
        }else if(vecOperacion[x] == "*" || vecOperacion[x] == "/" || vecOperacion[x] == "&&" || vecOperacion[x] == "%"){

        }
    }
}

void Error (int e,string sb, QTextEdit *Erro) {//Esta es la Tabla de Errores
    QString texto;
    switch ( e ){
        case 500:
            cout<<"Elemento no reconocido por el lenguaje: "<<sb;
            texto= QString::fromStdString("500: Elemento no reconocido por el lenguaje: "+sb);
            Erro->setPlainText(texto);
        break;
        case 501:
            texto= QString::fromStdString("501: Se esperaba un digito para numero flotante");
            Erro->setPlainText(texto);
        break;
        case 502:
            texto= QString::fromStdString("502: Se esperaba un digito o (+/-) Notacion cientifica");
            Erro->setPlainText(texto);
        break;
        case 503:
            texto= QString::fromStdString("503: Notacion Cientifica termina en digito");
            Erro->setPlainText(texto);
        break;
        case 504:
            texto= QString::fromStdString("504: No pueden venir 2 comillas juntas");
            Erro->setPlainText(texto);
        break;
        case 505:
            texto= QString::fromStdString("505: Se esperaba comilla");
            Erro->setPlainText(texto);
        break;
        case 506:
            texto= QString::fromStdString("506: El operador and se escribe &&");
            Erro->setPlainText(texto);
        break;
        case 507:
            texto= QString::fromStdString("507: El operador or se escribe ||");
            Erro->setPlainText(texto);
        break;
        case 508:
            texto= QString::fromStdString("508: Se esperaba .. (punto punto)");
            Erro->setPlainText(texto);
        break;
        case 509:
            texto= QString::fromStdString("509: Error sintactico: Se esperaba library o class");
            Erro->setPlainText(texto);
        break;
        case 510:
            texto= QString::fromStdString("510: Error sintactico: Se esperaba library o class");
            Erro->setPlainText(texto);
        break;
        case 511:
            texto= QString::fromStdString("511: Error sintactico: Se esperaba class");
            Erro->setPlainText(texto);
        break;
        case 512:
            texto= QString::fromStdString("512 Error sintactico: Se esperaba: def, func o main ");
            Erro->setPlainText(texto);
        break;
        case 513:
            texto= QString::fromStdString("513: Error sintactico: Se esperaba id");
            Erro->setPlainText(texto);
        break;
        case 514:
            texto= QString::fromStdString("514: Error sintactico: Se esperaba una coma o 'as'");
            Erro->setPlainText(texto);
        break;
        case 515:
            texto= QString::fromStdString("515: Error sintactico: Se esperaba int, float, char, string, bool, void");
            Erro->setPlainText(texto);
        break;
        case 516:
            texto= QString::fromStdString("516: Error sintactico: Se esperaba public, private, protected o id");
            Erro->setPlainText(texto);
        break;
        case 517:
            texto= QString::fromStdString("517: Error sintactico: Se esperaba un id");
            Erro->setPlainText(texto);
        break;
        case 518:
            texto= QString::fromStdString("518: Error sintactico: Se esperaba corchete que abre'[', coma o 'as'");
            Erro->setPlainText(texto);
        break;
        case 519:
            texto= QString::fromStdString("519: Error sintactico: Se esperaba corchete que abre '['");
            Erro->setPlainText(texto);
        break;
        case 520:
            texto= QString::fromStdString("520: Error sintactico: Se esperaba cteentera ");
            Erro->setPlainText(texto);
        break;
        case 521:
            texto= QString::fromStdString("521: Error sintactico: Se esperaba una coma o corchete que cierra']'");
            Erro->setPlainText(texto);
        break;
        case 522:
            texto= QString::fromStdString("522: Error sintactico: Se esperaba func o main");
            Erro->setPlainText(texto);
        break;
        case 523:
            texto= QString::fromStdString("523: Error sintactico: Se esperaba main");
            Erro->setPlainText(texto);
        break;
        case 524:
            texto= QString::fromStdString("524: Error sintactico: Se esperaba func o main ");
            Erro->setPlainText(texto);
        break;
        case 525:
            texto= QString::fromStdString("525: Error sintactico: Se esperaba local, id, if, while, for,"
            " do, ++, --, !, cteentera, ctereal, ctenotacion, ctecaracter, ctestring, (, return, read,"
            "write, endmain, endfunc, endfor, endwhile, eval, else, endif, elseif ");
            Erro->setPlainText(texto);
        break;
        case 526:
            texto= QString::fromStdString("526: Error sintactico: Se esperaba id o endlocal");
            Erro->setPlainText(texto);
        break;
        case 527:
            texto= QString::fromStdString("527: Error sintactico: Se esperaba id o parentesis que cierra')'");
            Erro->setPlainText(texto);
        break;
        case 528:
            texto= QString::fromStdString("528: Error sintactico: id, if, while, for, do, ++, --, !, cteentera,"
            " ctereal, ctenotacion, ctecaracter, ctestring, (, return, read, write,endmain, endfunc,"
            "endfor, endwhile, eval, else, elseif, endif");
            Erro->setPlainText(texto);
        break;
        case 529:
            texto= QString::fromStdString("529: Error sintactico: Se esperaba id");
            Erro->setPlainText(texto);
        break;
        case 530:
            texto= QString::fromStdString("530: Error sintactico: Se esperaba read");
            Erro->setPlainText(texto);
        break;
        case 531:
            texto= QString::fromStdString("531: Error sintactico: Se esperaba id");
            Erro->setPlainText(texto);
        break;
        case 532:
            texto= QString::fromStdString("532: Error sintactico: Se esperaba una coma o parentesis que cierra')'");
            Erro->setPlainText(texto);
        break;
        case 533:
            texto= QString::fromStdString("533: Error sintactico: Se esperaba write");
            Erro->setPlainText(texto);
        break;
        case 534:
            texto= QString::fromStdString("534: Error sintactico: Se esperaba !, id,"
            " cteentera, ctereal, ctenotacion, ctecaracter, ctestring, (}");
            Erro->setPlainText(texto);
        break;
        case 535:
            texto= QString::fromStdString("535: Error sintactico: Se esperaba una coma, corchete que cierra']',"
            " o parentesis que cierra')'");
            Erro->setPlainText(texto);
        break;
        case 536:
            texto= QString::fromStdString("536: Error sintactico: Se esperaba return");
            Erro->setPlainText(texto);
        break;
        case 537:
            texto= QString::fromStdString("537: Error sintactico: Se esperaba =, +=, -=, *=, /=, %=");
            Erro->setPlainText(texto);
        break;
        case 538:
            texto= QString::fromStdString("538: Error sintactico: Se esperaba id");
            Erro->setPlainText(texto);
        break;
        case 539:
            texto= QString::fromStdString("539: Error sintactico: Se esperaba corchete que abre'[', "
            "=, +=, -=, *=, /=, %= ");
            Erro->setPlainText(texto);
        break;
        case 540:
            texto= QString::fromStdString("540: Error sintactico: Se esperaba corchete que abre['");
            Erro->setPlainText(texto);
        break;
        case 541:
            texto= QString::fromStdString("541: Error sintactico: Se esperaba ++, --, !, id, cteentera, "
            "ctereal, ctenotacion, ctecaracter, ctestring, ( ");
            Erro->setPlainText(texto);
        break;
        case 542:
            texto= QString::fromStdString("542: Error sintactico: Se esperaba ++ o --");
            Erro->setPlainText(texto);
        break;
        case 543:
            texto= QString::fromStdString("543: Error sintactico: Se esperaba for");
            Erro->setPlainText(texto);
        break;
        case 544:
            texto= QString::fromStdString("544: Error sintactico: Se esperaba while");
            Erro->setPlainText(texto);
        break;
        case 545:
            texto= QString::fromStdString("545: Error sintactico: Se esperaba do");
            Erro->setPlainText(texto);
        break;
        case 546:
            texto= QString::fromStdString("546: Error sintactico: Se esperaba if");
            Erro->setPlainText(texto);
        break;
        case 547:
            texto= QString::fromStdString("547: Error sintactico: Se esperaba elseif, else, endif ");
            Erro->setPlainText(texto);
        break;
        case 548:
            texto= QString::fromStdString("548: Error sintactico: Se esperaba !, id, "
            "cteentera, ctereal, ctenotacion, ctecaracter, ctestring, (  ");
            Erro->setPlainText(texto);
        break;
        case 549:
            texto= QString::fromStdString("549: Error sintactico: Se esperaba ||, ; , , , ) , ] ,++,--, to, do");
            Erro->setPlainText(texto);
        break;
        case 550:
            texto= QString::fromStdString("550: Error sintactico: Se esperaba !, id, cteentera, ctereal, ctenotacion, ctecaracter, ctestring, ( ");
            Erro->setPlainText(texto);
        break;
        case 551:
            texto= QString::fromStdString("551: Error sintactico: Se esperaba &&, ||, ; , , , ) , ] ,++,--, to, do ");
            Erro->setPlainText(texto);
        break;
        case 552:
            texto= QString::fromStdString("552: Error sintactico: Se esperaba !, id, cteentera, ctereal, ctenotacion, ctecaracter, ctestring, (");
            Erro->setPlainText(texto);
        break;
        case 553:
            texto= QString::fromStdString("553: Error sintactico: Se esperaba id, cteentera, ctereal, ctenotacion, ctecaracter, ctestring, ( ");
            Erro->setPlainText(texto);
        break;
        case 554:
            texto= QString::fromStdString("554: Error sintactico: Se esperaba , ==, !=, <, <=, >,>=, &&, ||, ; , , , ) , ] ,++,--, to, do ");
            Erro->setPlainText(texto);
        break;
        case 555:
            texto= QString::fromStdString("555: Error sintactico: Se esperaba id, cteentera, ctereal, ctenotacion, ctecaracter, ctestring, ( ");
            Erro->setPlainText(texto);
        break;
        case 556:
            texto= QString::fromStdString("556: Error sintactico: Se esperaba +, -, ==, !=, <, <=, >,>= , &&, ||, ; , , , ) , ] , ++ , -- , to, do");
            Erro->setPlainText(texto);
        break;
        case 557:
            texto= QString::fromStdString("557: Error sintactico: Se esperaba id, cteentera, ctereal, ctenotacion, ctecaracter, ctestring, ( ");
            Erro->setPlainText(texto);
        break;
        case 558:
            texto= QString::fromStdString("558: Error sintactico: Se esperaba *, /, %, +, -, ==, !=, <, <=, >,>= , &&, ||, ; , , , ) , ] , ++ , -- , to, do");
            Erro->setPlainText(texto);
        break;
        case 559:
            texto= QString::fromStdString("559: Error sintactico: Se esperaba ==, !=, <, <=, >,>=");
            Erro->setPlainText(texto);
        break;
        case 560:
            texto= QString::fromStdString("560: Error sintactico: Se esperaba (, *, /, %, +, -, ==, !=, <, <=, >,>= ,"
            " &&, ||, ; , , , ) , ] , ++ , -- , to, do ");
            Erro->setPlainText(texto);
        break;
        case 561:
            texto= QString::fromStdString("561: Error sintactico: Se esperaba id o ')'");
            Erro->setPlainText(texto);
        break;
        case 562:
            texto= QString::fromStdString("562: Error sintactico: Se esperaba id, cteentera, ctereal, ctenotacion, ctecaracter, ctestring, ( ");
            Erro->setPlainText(texto);
        break;
        case 563:
            texto= QString::fromStdString("563: Error semantico: Variable duplicada: "+sb);
            Erro->setPlainText(texto);
        break;
        case 564:
            texto= QString::fromStdString("564: Error semantico: Variable no declarada: "+sb);
            Erro->setPlainText(texto);
        break;

    }
} // fin de error


void Sintactico(string token[],QTextEdit *Sintaxis, QTextEdit *Erro){
    QString texto;
    int i=0,nt=0,dev,fila,col,vacio=0,vuelta=0;
    void push(string element);
    void pop();
    int Fila(string a);
    int Columna(string b);
    void Derivaciones(int c);
    void Error (int dev,string sb, QTextEdit *Erro);
    string NT[]={"PROGRAM","DECLARA_LIBRARY","DECLARA_CLASS","DECLARA","ID2_DIM","C","TIPO","ACCESO_VAR","ID_DIM","ID_DIM'","DIM","DIM2","D",
                 "METODOS","DECLARA_MAIN","DECLARA_FUNCTION","DEC_LOCALVAR","DEC2","PARAMETROS","ESTATUTOS","EST_ASIG","EST_READ","ID2","ID2'",
                 "EST_WRITE","EX2","EX2'","EST_RETURN","OPASIG","ASIG","ASIG'","DIM_ASIG","EST_UNIT","EST_UNIT'","EST_FOR","EST_WHILE","EST_DO",
                 "EST_IF","EST_IF'","EXPR","EXPR'","EXPR2","EXPR2'","EXPR3","EXPR4","EXPR4'","EXPR5","EXPR5'","TERM","TERM'","OPREL","LLAMADA_F",
                 "LLAMADA_F'","FACT"};
    string tok,sta;
    tok=token[i];
    sta=stack[xstak-1];
    while(vacio==0){
        vuelta++;
        tok=token[i];
        sta=stack[xstak-1];
        for(int x=0;x<55;x++){
               if(stack[xstak-1].compare(NT[x]) == 0){ //SI EL TOPE DE LA PILA ES UN NO TERMINAL mi bandera nt=1
                nt=1;
                x=55;
            }
        }

        if(nt == 0){ //es un elemento terminal
            if((stack[xstak-1].compare("$") == 0) && (stack[xstak-1].compare(token[i])==0)){
                cout<<"!!!!ENTRADA VALIDA!!!";
                Sintaxis->setPlainText("Entrada Valida");
                vacio=1;
            }else if( (stack[xstak-1].compare(token[i])==0) && (stack[xstak-1].compare("$") !=0 ) ){
                pop();
                i++;
            }else{
                cout<<"Se esperaba: "<<token[i];
                string vuel(std::to_string(vuelta));
                texto= QString::fromStdString("Se esperaba: token:"+token[i]+" Stack: "+stack[xstak-1]+
                        " arriba: "+stack[xstak+1]+" Vuelta"+vuel);
                Erro->setPlainText(texto);
                break;
            }
        }else{ //elemento no terminal
            fila=Fila(stack[xstak-1]);
            col=Columna(token[i]);
            dev=MP[fila][col];
            if(dev < 500){
                pop();
                Derivaciones(dev);
            }else{
                cout<<"Se esperaba los first de: "<<stack[xstak-1];
                texto= QString::fromStdString("Se esperaba los first de: "+stack[xstak-1]);
                Erro->setPlainText(texto);
                Error(dev,sta, Erro);
                break;
            }
        }
        nt=0;
    }
}

void push(string element){
    stack[xstak]=element;
    xstak++;
}

void pop(){
    xstak--;
}

int Fila(string fila){
    if(fila.compare("PROGRAM") == 0){
        return 0;
    }else if(fila.compare("DECLARA_LIBRARY")== 0){
        return 1;
    }else if(fila.compare("DECLARA_CLASS")== 0){
        return 2;
    }else if(fila.compare("DECLARA")== 0){
        return 3;
    }else if(fila.compare("ID2_DIM")== 0){
        return 4;
    }else if(fila.compare("C")== 0){
        return 5;
    }else if(fila.compare("TIPO")== 0){
        return 6;
    }else if(fila.compare("ACCESO_VAR")== 0){
        return 7;
    }else if(fila.compare("ID_DIM")== 0){
        return 8;
    }else if(fila.compare("ID_DIM'")== 0){
        return 9;
    }else if(fila.compare("DIM")== 0){
        return 10;
    }else if(fila.compare("DIM2")== 0){
        return 11;
    }else if(fila.compare("D")== 0){
        return 12;
    }else if(fila.compare("METODOS")== 0){
        return 13;
    }else if(fila.compare("DECLARA_MAIN")== 0){
        return 14;
    }else if(fila.compare("DECLARA_FUNCTION")== 0){
        return 15;
    }else if(fila.compare("DEC_LOCALVAR")== 0){
        return 16;
    }else if(fila.compare("DEC2")== 0){
        return 17;
    }else if(fila.compare("PARAMETROS")== 0){
        return 18;
    }else if(fila.compare("ESTATUTOS")== 0){
        return 19;
    }else if(fila.compare("EST_ASIG")== 0){
        return 20;
    }else if(fila.compare("EST_READ")== 0){
        return 21;
    }else if(fila.compare("ID2")== 0){
        return 22;
    }else if(fila.compare("ID2'")== 0){
        return 23;
    }else if(fila.compare("EST_WRITE")== 0){
        return 24;
    }else if(fila.compare("EX2")== 0){
        return 25;
    }else if(fila.compare("EX2'")== 0){
        return 26;
    }else if(fila.compare("EST_RETURN")== 0){
        return 27;
    }else if(fila.compare("OPASIG")== 0){
        return 28;
    }else if(fila.compare("ASIG")== 0){
        return 29;
    }else if(fila.compare("ASIG'")== 0){
        return 30;
    }else if(fila.compare("DIM_ASIG'")== 0){
        return 31;
    }else if(fila.compare("EST_UNIT")== 0){
        return 32;
    }else if(fila.compare("EST_UNIT'")== 0){
        return 33;
    }else if(fila.compare("EST_FOR")== 0){
        return 34;
    }else if(fila.compare("EST_WHILE")== 0){
        return 35;
    }else if(fila.compare("EST_DO")== 0){
        return 36;
    }else if(fila.compare("EST_IF")== 0){
        return 37;
    }else if(fila.compare("EST_IF'")== 0){
        return 38;
    }else if(fila.compare("EXPR")== 0){
        return 39;
    }else if(fila.compare("EXPR'")== 0){
        return 40;
    }else if(fila.compare("EXPR2")== 0){
        return 41;
    }else if(fila.compare("EXPR2'")== 0){
        return 42;
    }else if(fila.compare("EXPR3")== 0){
        return 43;
    }else if(fila.compare("EXPR4")== 0){
        return 44;
    }else if(fila.compare("EXPR4'")== 0){
        return 45;
    }else if(fila.compare("EXPR5")== 0){
        return 46;
    }else if(fila.compare("EXPR5'")== 0){
        return 47;
    }else if(fila.compare("TERM")== 0){
        return 48;
    }else if(fila.compare("TERM'")== 0){
        return 49;
    }else if(fila.compare("OPREL")== 0){
        return 50;
    }else if(fila.compare("LLAMADA_F")== 0){
        return 51;
    }else if(fila.compare("LLAMADA_F'")== 0){
        return 52;
    }else if(fila.compare("FACT")== 0){
        return 53;
    }

    return 0;
}

int Columna(string col){
    if(col.compare("library")== 0){
        return 0;
    }else if(col.compare("class")== 0){
        return 1;
    }else if(col.compare("def")== 0){
        return 2;
    }else if(col.compare("func")== 0){
        return 3;
    }else if(col.compare("main")== 0){
        return 4;
    }else if(col.compare("id")== 0){
        return 5;
    }else if(col.compare(",")== 0){
        return 6;
    }else if(col.compare("as")== 0){
        return 7;
    }else if(col.compare("int")== 0){
        return 8;
    }else if(col.compare("float")== 0){
        return 9;
    }else if(col.compare("char")== 0){
        return 10;
    }else if(col.compare("string")== 0){
        return 11;
    }else if(col.compare("bool")== 0){
        return 12;
    }else if(col.compare("void")== 0){
        return 13;
    }else if(col.compare("public")== 0){
        return 14;
    }else if(col.compare("private")== 0){
        return 15;
    }else if(col.compare("protected")== 0){
        return 16;
    }else if(col.compare("[")== 0){
        return 17;
    }else if(col.compare("]")== 0){
        return 18;
    }else if(col.compare("local")== 0){
        return 19;
    }else if(col.compare("if")== 0){
        return 20;
    }else if(col.compare("while")== 0){
        return 21;
    }else if(col.compare("for")== 0){
        return 22;
    }else if(col.compare("do")== 0){
        return 23;
    }else if(col.compare("++")== 0){
        return 24;
    }else if(col.compare("--")== 0){
        return 25;
    }else if(col.compare("!")== 0){
        return 26;
    }else if(col.compare("cteentera")== 0){
        return 27;
    }else if(col.compare("ctereal")== 0){
        return 28;
    }else if(col.compare("ctenotacion")== 0){
        return 29;
    }else if(col.compare("ctecaracter")== 0){
        return 30;
    }else if(col.compare("ctestring")== 0){
        return 31;
    }else if(col.compare("(")== 0){
        return 32;
    }else if(col.compare("return")== 0){
        return 33;
    }else if(col.compare("read")== 0){
        return 34;
    }else if(col.compare("write")== 0){
        return 35;
    }else if(col.compare("endlocal")== 0){
        return 36;
    }else if(col.compare(")")== 0){
        return 37;
    }else if(col.compare("endmain")== 0){
        return 38;
    }else if(col.compare("endfunc")== 0){
        return 39;
    }else if(col.compare("endfor")== 0){
        return 40;
    }else if(col.compare("endwhile")== 0){
        return 41;
    }else if(col.compare("eval")== 0){
        return 42;
    }else if(col.compare("else")== 0){
        return 43;
    }else if(col.compare("endif")== 0){
        return 44;
    }else if(col.compare("elseif")== 0){
        return 45;
    }else if(col.compare("=")== 0){
        return 46;
    }else if(col.compare("+=")== 0){
        return 47;
    }else if(col.compare("-=")== 0){
        return 48;
    }else if(col.compare("*=")== 0){
        return 49;
    }else if(col.compare("/=")== 0){
        return 50;
    }else if(col.compare("%=")== 0){
        return 51;
    }else if(col.compare("||")== 0){
        return 52;
    }else if(col.compare("&&")== 0){
        return 53;
    }else if(col.compare("==")== 0){
        return 54;
    }else if(col.compare("!=")== 0){
        return 55;
    }else if(col.compare("<")== 0){
        return 56;
    }else if(col.compare("<=")== 0){
        return 57;
    }else if(col.compare(">")== 0){
        return 58;
    }else if(col.compare(">=")== 0){
        return 59;
    }else if(col.compare("+")== 0){
        return 60;
    }else if(col.compare("-")== 0){
        return 61;
    }else if(col.compare("*")== 0){
        return 62;
    }else if(col.compare("/")== 0){
        return 63;
    }else if(col.compare("%")== 0){
        return 64;
    }else if(col.compare(";")== 0){
        return 65;
    }else if(col.compare("to")== 0){
        return 66;
    }

    return 0;
}

void Derivaciones (int opc) {
    void push(string element);
    switch (opc){
    case 1:
           push("DECLARA_CLASS");
           push("DECLARA_LIBRARY");
        break;
    case 2:
        push("DECLARA_LIBRARY");
        push(";");
        push("id");
        push("library"); 
        break;
    case 3:
        break;
    case 4 :
        push("endclass");
        push("METODOS");
        push("DECLARA");
        push(";");
        push("id");
        push("class");
        break;
    case 5:
        push("DECLARA");
        push(";");
        push("TIPO");
        push("as");
        push("ID2_DIM");
        push("ACCESO_VAR");
        push("def");
        break;
    case 6:
        break;
    case 7:
        push("C");
        push("ID_DIM");
        break;
    case 8:
        push("ID2_DIM");
        push(",");
        break;
    case 9:
        break;
    case 10:
        push("int");
        break;
    case 11:
        push("float");
        break;
    case 12:
        push("char");
        break;
    case 13:
        push("string");
        break;
    case 14:
        push("bool");
        break;
    case 15:
        push("void");
        break;
    case 16:
        push("public");
        break;
    case 17:
        push("private");
        break;
    case 18:
        push("protected");
        break;
    case 19:
        break;
    case 20:
        push("ID_DIM'");
        push("id");
        break;
    case 21:
        push("DIM");
        break;
    case 22:
        break;
    case 23:
        push("]");
        push("DIM2");
        push("[");
        break;
    case 24:
        push("D");
        push("cteentera");
        push("..");
        push("cteentera");
        break;
    case 25:
        push("DIM2");
        push(",");
        break;
    case 26:
        break;
    case 27:
        push("DECLARA_MAIN");
        push("DECLARA_FUNCTION");
        break;
    case 28:
        push("endmain");
        push("ESTATUTOS");
        push("DEC_LOCALVAR");
        push(")");
        push("PARAMETROS");
        push("(");
        push("main");
        break;
    case 29:
        push("DECLARA_FUNCTION");
        push("endfunc");
        push("ESTATUTOS");
        push("DEC_LOCALVAR");
        push(")");
        push("PARAMETROS");
        push("(");
        push("TIPO");
        push("as");
        push("id");
        push("func");
        break;
    case 30:
        break;
    case 31:
        push("endlocal");
        push("DEC2");
        push("local");
        break;
    case 32:
        break;
    case 33:
        push("DEC2");
        push(";");
        push("TIPO");
        push("as");
        push("ID2_DIM");
        break;
    case 34:
        break;
    case 35:
        push(";");
        push("TIPO");
        push("as");
        push("ID2_DIM");
        break;
    case 36:
        break;
    case 37:
        push("ESTATUTOS");
        push(";");
        push("EST_ASIG");
        break;
    case 38:
        push("ESTATUTOS");
        push(";");
        push("EST_IF");
        break;
    case 39:
        push("ESTATUTOS");
        push(";");
        push("EST_WHILE");
        break;
    case 40:
        push("ESTATUTOS");
        push(";");
        push("EST_FOR");
        break;
    case 41:
        push("ESTATUTOS");
        push(";");
        push("EST_DO");
        break;
    case 42:
        push("ESTATUTOS");
        push(";");
        push("EST_UNIT");
        break;
    case 43:
        push("ESTATUTOS");
        push(";");
        push("EST_RETURN");
        break;
    case 44:
        push("ESTATUTOS");
        push(";");
        push("EST_READ");
        break;
    case 45:
        push("ESTATUTOS");
        push(";");
        push("EST_WRITE");
        break;
    case 46:
        break;
    case 47:
        push("EXPR");
        push("OPASIG");
        push("ASIG");
        break;
    case 48:
        push(")");
        push("ID2");
        push("(");
        push("read");
        break;
    case 49:
           push("ID2'");
           push("id");
        break;
    case 50:
        push("ID2");
        push(",");
        break;
    case 51:
        break;
    case 52:
        push(")");
        push("EX2");
        push("(");
        push("write");
        break;
    case 53:
        push("EX2'");
        push("EXPR");
        break;
    case 54:
        push("EX2");
        push(",");
        break;
    case 55:
        break;
    case 56:
        push("EXPR");
        push("return");
        break;
    case 57:
        push("=");
        break;
    case 58:
        push("+=");
        break;
    case 59:
        push("-=");
        break;
    case 60:
        push("*=");
        break;
    case 61:
        push("/=");
        break;
    case 62:
        push("%=");
        break;
    case 63:
        push("ASIG'");
        push("id");
        break;
    case 64:
        push("DIM_ASIG");
        break;
    case 65:
        break;
    case 66:
        push("]");
        push("EX2");
        push("[");
        break;
    case 67:
        push("EXPR");
        push("++");
        break;
    case 68:
        push("EXPR");
        push("--");
        break;
    case 69:
        push("EXPR");
        push("EST_UNIT'");
        break;
    case 70:
        push("++");
        break;
    case 71:
        push("--");
        break;
    case 72:
        push("endfor");
        push("ESTATUTOS");
        push("do");
        push("EXPR");
        push("to");
        push("EXPR");
        push("=");
        push("id");
        push("for");
        break;
    case 73:
        push("endwhile");
        push("ESTATUTOS");
        push(")");
        push("EXPR");
        push("(");
        push("while");
        break;
    case 74:
        push("enddo");
        push(")");
        push("EXPR");
        push("(");
        push("eval");
        push("ESTATUTOS");
        push("do");
        break;
    case 75:
        push("EST_IF'");
        push("ESTATUTOS");
        push(")");
        push("EXPR");
        push("(");
        push("if");
        break;
    case 76:
        push("endif");
        push("ESTATUTOS");
        push("else");
        push("ESTATUTOS");
        push(")");
        push("EXPR");
        push("(");
        push("elseif");
        break;
    case 77:
        push("endif");
        push("ESTATUTOS");
        push("else");
        break;
    case 78:
        push("endif");
        break;
    case 79:
        push("EXPR'");
        push("EXPR2");
        break;
    case 80:
        push("EXPR");
        push("||");
        break;
    case 81:
        break;
    case 82:
        push("EXPR2'");
        push("EXPR3");
        break;
    case 83:
        push("EXPR2");
        push("&&");
        break;
    case 84:
        break;
    case 85:
        push("EXPR4");
        push("!");
        break;
    case 86:
        push("EXPR4");
        break;
    case 87:
        push("EXPR4'");
        push("EXPR5");
        break;
    case 88:
        push("EXPR5");
        push("OPREL");
        break;
    case 89:
        break;
    case 90:
        push("EXPR5'");
        push("TERM");
        break;
    case 91:
        push("EXPR5");
        push("+");
        break;
    case 92:
        push("EXPR5");
        push("-");
        break;
    case 93:
        break;
    case 94:
        push("TERM'");
        push("FACT");
        break;
    case 95:
        push("TERM");
        push("*");
        break;
    case 96:
        push("TERM");
        push("/");
        break;
    case 97:
        push("TERM");
        push("%");
        break;
    case 98:
        break;
    case 99:
        push("==");
        break;
    case 100:
        push("!=");
        break;
    case 101:
        push("<");
        break;
    case 102:
        push("<=");
        break;
    case 103:
        push(">");
        break;
    case 104:
        push(">=");
        break;
    case 105:
        push("LLAMADA_F'");
        push("(");
        break;
    case 106:
        break;
    case 107:
        push(")");
        push("ID2");
        break;
    case 108:
        push(")");
        break;
    case 109:
        push("LLAMADA_F");
        push("id");
        break;
    case 110:
        push("cteentera");
        break;
    case 111:
        push("ctereal");
        break;
    case 112:
        push("ctenotacion");
        break;
    case 113:
        push("ctecaracter");
        break;
    case 114:
        push("ctestring");
        break;
    case 115:
        push(")");
        push("EXPR");
        push("(");
        break;
    }
}


void MainWindow::on_btnAbrir_clicked()
{
    QString fileName = QFileDialog :: getOpenFileName ( this ,
        tr ( "Abrir Archivo" ) ,
        "C:/Users/bradl/Documents" ,
        tr ( "Text Files (* .spes)" ));

    if(!fileName.isEmpty()){
        QFile file(fileName);
        if(file.open(QFile::ReadOnly)){
            ui ->txtAnaliza->setPlainText(file.readAll());
        }
    }
}


void MainWindow::on_btnGuardar_clicked()
{
    QString path = QDir::currentPath();
        QString filename = QFileDialog::getSaveFileName(this, tr("Save Spes File"), path, tr("Spes Files (*.spes)"));

        if(filename.isEmpty())
            return;

        QFile file(filename);

        if(!file.open(QFile::WriteOnly |
                      QFile::Text))
        {
            qDebug() << " Could not open file for writing";
            return;
        }

        QTextStream out(&file);
        out << ui->txtAnaliza->toPlainText();
        file.flush();
        file.close();
}


void MainWindow::on_btnLimpiar_clicked()
{
    QString Ing = ui->txtAnaliza->toPlainText();
    string sIng="";
    sIng = Ing.toStdString();
    int t= sIng.length();
    while(t >= 0){
        ui->tablaT->removeRow(t);
        t-=1;
    }

    for(int x=0;x<filti;x++){
        ui->tablaTipos->removeRow(x);
        tipos[x][0].erase();
        tipos[x][1].erase();
    }

    ui->txtAnaliza->setPlainText("");
    ui->txtErrores->setPlainText("");
    ui->txtSintaxis->setPlainText("");

    xtoken=0;
    xstak=2;

    for(int i=0;i<200;i++){
        token[i].erase();
        stack[i].erase();
    }
}

